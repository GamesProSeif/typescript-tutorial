"use strict";
class User {
    constructor(name, age, password) {
        this.name = name;
        this.age = age;
        this._password = password;
    }
    get password() {
        return this.password;
    }
}
const user = new User('Seif', 17, 'abcd');
class UserDef {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.verified = false;
        this.name = name;
        this.age = age;
    }
}
const userDef = new UserDef('Seif', 17);
console.log(userDef.verified);
class Client {
    constructor(id) {
        this.id = id;
    }
}
const client = new Client('1');
class Animal {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.name = name;
        this.age = age;
    }
}
class Dog extends Animal {
    constructor(name, age, withSpots) {
        super(name, age);
        this.withSpots = withSpots;
        this.withSpots = withSpots;
    }
}
class Cat extends Animal {
    talk() {
        console.log('meow');
    }
}
const cat = new Cat('Mimi', 5);
cat.talk();
class Bird extends Animal {
    constructor() {
        super(...arguments);
        this.hasWings = true;
        this.hungerLevel = 0;
    }
    feed() {
        this.hungerLevel++;
    }
}
class Parrot extends Bird {
    feedMultiple(amount) {
        for (let i = 0; i < amount; i++) {
            this.feed();
        }
    }
}
const maxNameLength = 10;
class Employee {
    constructor() {
        this._fullName = '';
    }
    get fullName() {
        return this._fullName;
    }
    set fullName(name) {
        if (name && name.length > maxNameLength) {
            throw new Error('Exceeded max name length');
        }
        this._fullName = name;
    }
}
class Grid {
    static getDefaultScale() {
        return 1;
    }
    calculateDistanceFromOrigin(point) {
        let xDist = (point.x - Grid.origin.x);
        let yDist = (point.y - Grid.origin.y);
        return Math.sqrt(xDist * xDist + yDist * yDist) / Grid.getDefaultScale();
    }
}
Grid.origin = { x: 0, y: 0 };
class AnimalAbstract {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.name = name;
        this.age = age;
    }
}
class DogAbstract extends AnimalAbstract {
    constructor() {
        super(...arguments);
        this.withSpots = false;
    }
}
const dog = new DogAbstract('rex', 5);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Nlcy5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImNsYXNzZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE1BQU0sSUFBSTtJQUtULFlBQW1CLElBQVksRUFBRSxHQUFXLEVBQUUsUUFBZ0I7UUFDN0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDO0NBQ0Q7QUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBSTFDLE1BQU0sT0FBTztJQUdaLFlBQ1EsSUFBWSxFQUNaLEdBQVc7UUFEWCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUpaLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFNdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDaEIsQ0FBQztDQUNEO0FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRzlCLE1BQU0sTUFBTTtJQUdYLFlBQW1CLEVBQVU7UUFDNUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0Q7QUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUkvQixNQUFNLE1BQU07SUFDWCxZQUNRLElBQVksRUFDWixHQUFXO1FBRFgs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QUM7SUFDMUIsQ0FBQztDQUFBO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUHVibGljICYgUHJpdmF0ZSBQcm9wZXJ0aWVzICYgTWV0aG9kc1xyXG5jbGFzcyBVc2VyIHtcclxuXHRwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG5cdHB1YmxpYyBhZ2U6IG51bWJlcjtcclxuXHRwcml2YXRlIF9wYXNzd29yZDogc3RyaW5nO1xyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBhZ2U6IG51bWJlciwgcGFzc3dvcmQ6IHN0cmluZykge1xyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMuYWdlID0gYWdlO1xyXG5cdFx0dGhpcy5fcGFzc3dvcmQgPSBwYXNzd29yZDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgcGFzc3dvcmQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLnBhc3N3b3JkO1xyXG5cdH1cclxufVxyXG5cclxuY29uc3QgdXNlciA9IG5ldyBVc2VyKCdTZWlmJywgMTcsICdhYmNkJyk7XHJcbi8vIGNvbnNvbGUubG9nKHVzZXIuX3Bhc3N3b3JkKTsgLy9cclxuXHJcbi8vIFByb3BlcnRpZXMgd2l0aCBkZWZhdWx0IHZhbHVlc1xyXG5jbGFzcyBVc2VyRGVmIHtcclxuXHRwdWJsaWMgdmVyaWZpZWQgPSBmYWxzZTtcclxuXHJcblx0cHVibGljIGNvbnN0cnVjdG9yKFxyXG5cdFx0cHVibGljIG5hbWU6IHN0cmluZyxcclxuXHRcdHB1YmxpYyBhZ2U6IG51bWJlcixcclxuXHQpIHtcclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLmFnZSA9IGFnZTtcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IHVzZXJEZWYgPSBuZXcgVXNlckRlZignU2VpZicsIDE3KTtcclxuY29uc29sZS5sb2codXNlckRlZi52ZXJpZmllZCk7XHJcblxyXG4vLyBSZWFkb25seSBQcm9wZXJ0aWVzXHJcbmNsYXNzIENsaWVudCB7XHJcblx0cHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmlkID0gaWQ7XHJcblx0fVxyXG59XHJcblxyXG5jb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50KCcxJyk7XHJcbi8vIGNsaWVudC5pZCA9ICcyJzsgLy9cclxuXHJcbi8vIEV4dGVuZGluZyBDbGFzc2VzXHJcbmNsYXNzIEFuaW1hbCB7XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKFxyXG5cdFx0cHVibGljIG5hbWU6IHN0cmluZyxcclxuXHRcdHB1YmxpYyBhZ2U6IG51bWJlcixcclxuXHQpIHtcclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLmFnZSA9IGFnZTtcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIERvZyBleHRlbmRzIEFuaW1hbCB7XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKFxyXG5cdFx0bmFtZTogc3RyaW5nLCBhZ2U6IG51bWJlcixcclxuXHRcdHB1YmxpYyB3aXRoU3BvdHM6IGJvb2xlYW5cclxuXHQpIHtcclxuXHRcdHN1cGVyKG5hbWUsIGFnZSk7XHJcblx0XHR0aGlzLndpdGhTcG90cyA9IHdpdGhTcG90cztcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIENhdCBleHRlbmRzIEFuaW1hbCB7XHJcblx0cHVibGljIHRhbGsoKSB7XHJcblx0XHRjb25zb2xlLmxvZygnbWVvdycpO1xyXG5cdH1cclxufVxyXG5cclxuY29uc3QgY2F0ID0gbmV3IENhdCgnTWltaScsIDUpO1xyXG5jYXQudGFsaygpO1xyXG5cclxuLy8gUHJvdGVjdGVkIFByb3BlcnRpZXNcclxuY2xhc3MgQmlyZCBleHRlbmRzIEFuaW1hbCB7XHJcblx0cHVibGljIHJlYWRvbmx5IGhhc1dpbmdzID0gdHJ1ZTtcclxuXHRwdWJsaWMgaHVuZ2VyTGV2ZWwgPSAwO1xyXG5cclxuXHRwcm90ZWN0ZWQgZmVlZCgpIHtcclxuXHRcdHRoaXMuaHVuZ2VyTGV2ZWwrKztcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIFBhcnJvdCBleHRlbmRzIEJpcmQge1xyXG5cdGZlZWRNdWx0aXBsZShhbW91bnQ6IG51bWJlcikge1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnQ7IGkrKykge1xyXG5cdFx0XHR0aGlzLmZlZWQoKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8vIEFjY2Vzc29yc1xyXG5jb25zdCBtYXhOYW1lTGVuZ3RoID0gMTA7XHJcblxyXG5jbGFzcyBFbXBsb3llZSB7XHJcblx0cHJpdmF0ZSBfZnVsbE5hbWU6IHN0cmluZyA9ICcnO1xyXG5cclxuXHRwdWJsaWMgZ2V0IGZ1bGxOYW1lKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2Z1bGxOYW1lO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldCBmdWxsTmFtZShuYW1lOiBzdHJpbmcpIHtcclxuXHRcdGlmIChuYW1lICYmIG5hbWUubGVuZ3RoID4gbWF4TmFtZUxlbmd0aCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0V4Y2VlZGVkIG1heCBuYW1lIGxlbmd0aCcpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5fZnVsbE5hbWUgPSBuYW1lO1xyXG5cdH1cclxufVxyXG5cclxuLy8gU3RhdGljIFByb3BlcnRpZXMgYW5kIE1ldGhvZHNcclxuY2xhc3MgR3JpZCB7XHJcblx0cHVibGljIHN0YXRpYyBvcmlnaW4gPSB7IHg6IDAsIHk6IDAgfTtcclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXREZWZhdWx0U2NhbGUoKSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9XHJcblxyXG5cdGNhbGN1bGF0ZURpc3RhbmNlRnJvbU9yaWdpbihwb2ludDoge3g6IG51bWJlcjsgeTogbnVtYmVyO30pIHtcclxuXHRcdGxldCB4RGlzdCA9IChwb2ludC54IC0gR3JpZC5vcmlnaW4ueCk7XHJcblx0XHRsZXQgeURpc3QgPSAocG9pbnQueSAtIEdyaWQub3JpZ2luLnkpO1xyXG5cdFx0cmV0dXJuIE1hdGguc3FydCh4RGlzdCAqIHhEaXN0ICsgeURpc3QgKiB5RGlzdCkgLyBHcmlkLmdldERlZmF1bHRTY2FsZSgpO1xyXG5cdH1cclxufVxyXG5cclxuLy8gQWJzdHJhY3QgQ2xhc3Nlc1xyXG5hYnN0cmFjdCBjbGFzcyBBbmltYWxBYnN0cmFjdCB7XHJcblx0cHVibGljIGNvbnN0cnVjdG9yKFxyXG5cdFx0cHVibGljIG5hbWU6IHN0cmluZyxcclxuXHRcdHB1YmxpYyBhZ2U6IG51bWJlclxyXG5cdCkge1xyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMuYWdlID0gYWdlO1xyXG5cdH1cclxufVxyXG5cclxuLy8gY29uc3QgYW5pbWFsID0gbmV3IEFuaW1hbEFic3RyYWN0KCdyZXgnLCA1KTsgLy9cclxuXHJcbmNsYXNzIERvZ0Fic3RyYWN0IGV4dGVuZHMgQW5pbWFsQWJzdHJhY3Qge1xyXG5cdHB1YmxpYyB3aXRoU3BvdHMgPSBmYWxzZTtcclxufVxyXG5cclxuY29uc3QgZG9nID0gbmV3IERvZ0Fic3RyYWN0KCdyZXgnLCA1KTtcclxuIl19