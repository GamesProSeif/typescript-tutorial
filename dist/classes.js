"use strict";
class User {
    constructor(name, age, password) {
        this.name = name;
        this.age = age;
        this._password = password;
    }
    logName() {
        console.log(this.name);
    }
    get password() {
        return 'The password is: ' + this._password;
    }
}
class User1 {
    constructor(name, age, _password) {
        this.name = name;
        this.age = age;
        this._password = _password;
        this.name = name;
        this.age = age;
        this._password = _password;
    }
}
class UserDef {
    constructor(name, age) {
        this.verified = false;
        this.name = name;
        this.age = age;
    }
}
const userDef = new UserDef('Shadow', 27);
class Animal {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.name = name;
        this.age = age;
    }
}
class Dog extends Animal {
    constructor(name, age, withSpots) {
        super(name, age);
        this.withSpots = withSpots;
        this.withSpots = withSpots;
    }
}
const rex = new Dog('shadow', 3, true);
class Cat extends Animal {
    talk() {
        console.log('meow');
    }
}
const mimi = new Cat('Mimi', 13);
class Bird extends Animal {
    constructor() {
        super(...arguments);
        this.hasWings = true;
        this.hungerLevel = 0;
    }
    feed() {
        this.hungerLevel++;
    }
}
class Parrot extends Bird {
    feedMultiple(amount) {
        for (let i = 0; i < amount; i++) {
            this.feed();
        }
    }
}
const bird = new Parrot('Canari', 2);
bird.feedMultiple(5);
const maxNameLength = 10;
class Employee {
    constructor() {
        this._fullname = '';
    }
    get fullName() {
        return this._fullname;
    }
    set fullName(name) {
        if (name && name.length > maxNameLength) {
            throw new Error('Exceeded max name length');
        }
        this._fullname = name;
    }
}
const employee = new Employee();
employee.fullName = '512';
class Grid {
    static defaultScale() {
        return 1;
    }
    calculateDistance(point) {
        let xDist = (point.x - Grid.origin.x);
        let yDist = (point.y - Grid.origin.y);
        return Math.sqrt(xDist ** 2 + yDist ** 2) / Grid.defaultScale();
    }
}
Grid.origin = { x: 0, y: 0 };
class AnimalAbs {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        this.name = name;
        this.age = age;
    }
}
class DogAbs extends AnimalAbs {
    constructor() {
        super(...arguments);
        this.withSpots = false;
    }
}
const bolbol = new DogAbs('Bolbol', 6);
//# sourceMappingURL=data:application/json;base64,